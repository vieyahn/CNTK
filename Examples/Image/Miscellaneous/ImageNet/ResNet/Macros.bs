# assembly components
## Convolution + Batch Normalization
ConvBNLayer {outChannels, kernel, stride} = Sequential(
    ConvolutionalLayer {outChannels, kernelSize, init = "heNormal", stride = strideSize, pad = true, bias = false} :
    BatchNormalizationLayer {spatialRank = 2, normalizationTimeConstant = 0, useCntkEngine = false}
)

## Convolution + Batch Normalization + Rectifier Linear
ConvBNReLULayer {outChannels, kernelSize, strideSize} = Sequential(
    ConvBNLayer {outChannels, kernelSize, strideSize} :
    ReLU
)

# ResNet components
ResNetBottleneckInc {outChannels, interOutChannels, stride = 2, strideA = 2, strideB = 1} = Sequential(
    Parallel(
        # Branch
        Sequential (
            ConvBNReLULayer {interOutChannels, (1: 1), (strideA: strideA)} :
            ConvBNReLULayer {interOutChannels, (3: 3), (strideB: strideB)} :
            ConvBNLayer {outChannels, (1: 1), (1: 1)}
        ) :
        # Shortcut
        ConvBNLayer {outChannels, (1: 1), (stride: stride)},
        # Plus
        SumElements
    ) :
    ReLU
)

ResNetBottleneck {outChannels, interOutChannels} = Sequential(
    Parallel(
        # Branch
        Sequential (
            ConvBNReLULayer {interOutChannels, (1: 1), (1: 1)} :
            ConvBNReLULayer {interOutChannels, (3: 3), (1: 1)} :
            ConvBNLayer {outChannels, (1: 1), (1: 1)}
        ) :
        # Shortcut
        Identity,
        # Plus
        SumElements
    ) :
    ReLU
)